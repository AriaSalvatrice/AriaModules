name: Build VCV Rack Plugin
on: [push, pull_request]

env:
  rack-sdk-version: 1.1.6
  release-tag: AzureCI
  add-gitrev-to-plugin-version: |
    gitrev=`git rev-parse --short HEAD`
    version="1.0.${gitrev}"
    echo "Updating to version=$version"
    tf=`mktemp`
    jq --arg VERSION "$version" '.version=$VERSION' plugin.json > $tf
    mv $tf plugin.json
# do not change indentation from tab to spaces in patch-makefile variable!
  patch-makefile: | # extra dist target for CI Windows build, as there is only 7zip available and no zip command
    cat << 'EOF' >> Makefile
    ifdef ARCH_WIN
    ci-win-dist: all
    	mkdir -p dist/$(SLUG)
    	@# Strip and copy plugin binary
    	cp $(TARGET) dist/$(SLUG)/
    	$(STRIP) -s dist/$(SLUG)/$(TARGET)
    	@# Copy distributables
    	cp -R $(DISTRIBUTABLES) dist/$(SLUG)/
    	@# Create ZIP package
    	cd dist && 7z a -tzip -mx=9 $(SLUG)-$(VERSION)-$(ARCH).zip -r $(SLUG)
    endif
    EOF

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: Linux,
            os: ubuntu-latest,
            prepare-os: sudo apt install -y libglu-dev,
            dist-target: dist
          }
        - {
            name: MacOS,
            os: macos-latest,
            prepare-os: "",
            dist-target: dist
          }
        - {
            name: Windows,
            os: windows-latest,
            prepare-os: export CC=gcc,
            dist-target: ci-win-dist
          }
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Get Rack-SDK
        shell: bash
        run: |
          pushd $HOME
          curl -o Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}.zip
          unzip Rack-SDK.zip
      - name: Update version in plugin.json
        shell: bash
        run: |
          ${{ env.add-gitrev-to-plugin-version }}
      - name: Build Plugin
        shell: bash
        run: |
          ${{ env.patch-makefile }}
          ${{ matrix.config.prepare-os }}
          export RACK_DIR=$HOME/Rack-SDK
          make -j dep
          make -j ${{ matrix.config.dist-target }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          path: dist
          name: ${{ matrix.config.name }}

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/development'
    steps:
      - uses: actions/download-artifact@v2
      - name: Tag asset names with date
        run: |
          mv **/*.zip .
          export EXTEND_TAG=`date "+%Y%m%d"`
          for file in ./*.zip; do mv "$file" "${file/.zip/-${EXTEND_TAG}.zip}"; done
      - name: Delete existing release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.release-tag }}
          assets: '*.zip'
      - name: Upload release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "*.zip"
          tag: ${{ env.release-tag }}
          overwrite: true
          file_glob: true
